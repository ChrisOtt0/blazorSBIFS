@page "/group"
@page "/group/{GroupID:int}"
@inject IGroupViewModel _viewModel
@inject IHttpService _httpService
@inject ITokenService _tokenService
@inject NavigationManager _navigationManager

<PageTitle>Group @GroupName</PageTitle>

<h3>Group @GroupName</h3>

@if (GroupID == 0) {
	<div>
		<h4>Group not found</h4>
	</div>
} else {
	<!-- Add group content for editing here -->
	<div class="column-10">
		<div>
			<input type="text" @bind-value="_viewModel.Group.Name" class="form-control"/>
			<br />
			<button class="btn btn-primary" @onclick="@(() => _viewModel.UpdateName())">Update</button>
		</div>
		<br />
		<h5 style="font-weight: bold">Participants</h5>
		<div class="col-8">
			@foreach (User user in _viewModel.Group.Participants)
			{
				<p>
					@user.Name
					<button @onclick="@(() => _viewModel.RemoveParticipant(user))" class="btn btn-danger" style="float: right">Remove</button>
				</p>
			}
		</div>
		<br />
		<button class="btn btn-primary">Add Participant</button>
	</div>
}


@code {
	[Parameter]
	public int GroupID { get; set; }
	public string GroupName { get; set; } = "not found.";

	protected override async void OnInitialized() {
		if (_tokenService.Jwt == string.Empty) _navigationManager.NavigateTo("login");
		_viewModel.StateHasChangedDelegate = StateHasChanged;
		_viewModel.GroupName = this.GroupName;

		string url = "ReadOne";
		IJson data = new GroupDto
		{
			GroupID = this.GroupID
		};
		HttpResponseMessage response = await _httpService.Post(_viewModel.BaseUrl + url, data);

		// catching errors
		if (!response.IsSuccessStatusCode) {
			GroupID = 0;
			return;
		}

		Group? g = await response.Content.ReadFromJsonAsync<Group>();
		if (g == null) {
			GroupID = 0;
			return;
		}

		_viewModel.Group = g;
		GroupName = g.Name;
		StateHasChanged();
	}
}
